LSTM eğitim ve ince ayar kullanıcı dostu bir şekilde güncellenmeli.

Örnek bir kod bunu incele yardım al:

import streamlit as st
import pandas as pd
import numpy as np
from datetime import timedelta
import plotly.graph_objects as go
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from tensorflow.keras.callbacks import History

# --- Örnek veri: df_cleaned ---
# df_cleaned = pd.read_csv("your_data.csv", index_col=0, parse_dates=True)
data_cols = df_cleaned.columns

st.header("LSTM ile Geleceğe Yönelik Parametre Tahmini")
st.markdown(
    "Bu modül, seçtiğiniz bir parametrenin geçmiş verilerini kullanarak gelecekteki değerlerini tahmin etmek için bir "
    "Uzun Kısa Süreli Bellek (LSTM) sinir ağı modeli kullanır."
)

# Kullanıcı seçimleri
plants_lstm = sorted({col.split()[0] for col in data_cols})
selected_plant_lstm = st.selectbox("Tahmin Edilecek Tesisi Seçin", plants_lstm, key="plant_lstm")

if selected_plant_lstm:
    params_for_plant = sorted([c for c in data_cols if c.startswith(selected_plant_lstm)])
    selected_param_lstm = st.selectbox("Tahmin Edilecek Parametreyi Seçin", params_for_plant, key="param_lstm")

    # Eğitim parametreleri
    forecast_days = st.slider("Gelecek Kaç Gün Tahmin Edilsin?", min_value=7, max_value=90, value=30, key="forecast_days")
    time_step = st.slider("LSTM için Time Step (Geçmiş Gün Sayısı)", min_value=10, max_value=120, value=60)
    epochs = st.slider("Eğitim Epoch Sayısı", min_value=10, max_value=200, value=50)
    batch_size = st.slider("Batch Size", min_value=8, max_value=128, value=32)

    # Veri aralığı seçimi
    start_date = st.date_input("Eğitim Verisinin Başlangıç Tarihi", value=df_cleaned.index.min())
    end_date = st.date_input("Eğitim Verisinin Bitiş Tarihi", value=df_cleaned.index.max())

    if st.button("Tahmin Modelini Çalıştır", key="run_lstm"):
        with st.spinner("1/3: Veri hazırlanıyor..."):
            # Seçilen parametre ve tarih aralığını filtrele
            series = df_cleaned[selected_param_lstm].loc[start_date:end_date].dropna()
            scaler = MinMaxScaler()
            scaled_series = scaler.fit_transform(series.values.reshape(-1, 1))

            # Time-step ile veri oluştur
            X, y = [], []
            for i in range(time_step, len(scaled_series)):
                X.append(scaled_series[i-time_step:i, 0])
                y.append(scaled_series[i, 0])
            X, y = np.array(X), np.array(y)
            X = X.reshape(X.shape[0], X.shape[1], 1)

        with st.spinner("2/3: Model eğitiliyor..."):
            model = Sequential()
            model.add(LSTM(50, activation='tanh', input_shape=(X.shape[1], 1)))
            model.add(Dense(1))
            model.compile(optimizer='adam', loss='mse')

            history = model.fit(X, y, epochs=epochs, batch_size=batch_size, verbose=0)

            # Eğitim kaybı grafiği
            fig_loss = go.Figure()
            fig_loss.add_trace(go.Scatter(y=history.history['loss'], mode='lines', name='Eğitim Kaybı'))
            fig_loss.update_layout(title="Model Eğitim Kaybı", xaxis_title="Epoch", yaxis_title="Loss (MSE)")
            st.plotly_chart(fig_loss, use_container_width=True)

        with st.spinner(f"3/3: Gelecek {forecast_days} gün tahmin ediliyor..."):
            last_sequence = scaled_series[-time_step:].reshape(1, time_step, 1)
            forecast_values = []
            for _ in range(forecast_days):
                pred = model.predict(last_sequence, verbose=0)[0, 0]
                forecast_values.append(pred)
                last_sequence = np.append(last_sequence[:, 1:, :], [[pred]], axis=1)

            forecast_values = scaler.inverse_transform(np.array(forecast_values).reshape(-1, 1)).flatten()

            # Tarihler
            last_date = series.index.max()
            future_dates = pd.to_datetime([last_date + timedelta(days=i) for i in range(1, forecast_days + 1)])

            # Grafik
            fig_forecast = go.Figure()
            fig_forecast.add_trace(go.Scatter(x=series.index, y=series.values, mode='lines', name='Geçmiş Veriler'))
            fig_forecast.add_trace(go.Scatter(x=future_dates, y=forecast_values, mode='lines', name='Tahmin Edilen Değerler',
                                              line=dict(color='red', dash='dash')))
            fig_forecast.update_layout(title=f"{selected_plant_lstm} - '{selected_param_lstm}' Parametresi Tahmini",
                                       xaxis_title="Tarih", yaxis_title="Değer", legend_title="Veri Tipi")
            st.plotly_chart(fig_forecast, use_container_width=True)

            # Tablo
            df_forecast = pd.DataFrame({'Tarih': future_dates, 'Tahmin Edilen Değer': forecast_values})
            df_forecast['Tarih'] = df_forecast['Tarih'].dt.strftime('%Y-%m-%d')
            st.subheader(f"Gelecek {forecast_days} Günlük Tahmin Değerleri")
            st.dataframe(df_forecast.set_index('Tarih').style.format("{:.2f}"))

        st.success("Tahmin işlemi başarıyla tamamlandı!")


########################################################

Sistem Belirtilen yolu bulamıyor. girdisi?


########################################################

CSV nin ikinci sayfasına birimler eklenebilir.


########################################################

LTSM sekmesinde copy paste çalışıyor mu kontrol et. dataframe de data editor kullan.


########################################################

descriptive statistics alanında bir histogram çiz, bin range i ayrı bir tabloda göster, skewness ve kurtosis değerlerini yorumla Stdev ve variance için Coefficient of Variation (CV) = Std Dev / Mean yöntemini kullan.

